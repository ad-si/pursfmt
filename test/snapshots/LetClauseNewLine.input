module LetClauseNewLine where

-- Simple let expression with single binding (default: new line)
simple = let x = 42
         in x + 1

-- Multiple bindings in let
multiple = let a = 1
               b = 2
               c = a + b
           in c * 2

-- Nested let expressions
nested = let outer = 10
         in let inner = 20
            in outer + inner

-- Let in case branch
caseLetSingle = case x of
  Just a -> let helper = a + 1
            in helper * 2
  Nothing -> 0

-- Let in if-then-else
ifLetSingle = if condition
  then let helper = 42
       in helper * 2
  else 0

-- Let in do notation (single binding)
doLetSingle = do
  result <- getSomething
  let helper = result + 1
  pure helper

-- Let with where clause
letWithWhere = let x = helper
               in x + 1
  where
  helper = 42

-- Let with lambda
letWithLambda = let f = \x -> x + 1
                in f 42

-- Let in lambda body
lambdaLet = \x -> let y = x * 2
                  in y + 1
